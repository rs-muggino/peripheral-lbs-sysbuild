/ {

	leds {
		compatible = "gpio-leds";
		led_sun: led_sun {
			gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
			label = "Sun LED";
		};
		led_frost: led_frost {
			gpios = <&gpio0 10 GPIO_ACTIVE_LOW>;
			label = "Frost LED";
		};
	};

    pwmleds {
        compatible = "pwm-leds";
        pwm_led0: pwm_led_0 {
            pwms = <&pwm0 0 PWM_MSEC(20) PWM_POLARITY_NORMAL>; // R
        };
        pwm_led1: pwm_led_1 {
            pwms = <&pwm0 1 PWM_MSEC(20) PWM_POLARITY_NORMAL>; // G
        };
        pwm_led2: pwm_led_2 {
            pwms = <&pwm0 2 PWM_MSEC(20) PWM_POLARITY_NORMAL>; // B
        };
    };
    pins {
        compatible = "gpio-leds";
        enable_measure: enable_measure {
            gpios = <&gpio0 25 GPIO_PULL_UP>;
            label = "Enable NTC measurements";
        };
        chg_stat: chg_stat {
            gpios = <&gpio0 9 GPIO_PULL_UP>;
            label = "Charge status indicator";
        };
    };

	buttons {
		compatible = "gpio-keys";
		button_heat: button_heat {
			/* noise is unlikely to trigger button in active low configuration */
			gpios = <&gpio0 11 (GPIO_ACTIVE_LOW)>;
			label = "Heat Button";
		};
		button_cool: button_cool {
			gpios = <&gpio0 29 (GPIO_ACTIVE_LOW)>;
			label = "Cool Button";
		};
	};


	teg {
		compatible = "gpio-leds";
		teg_on: teg_on {
			gpios = <&gpio0 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; // off by default 
			label = "TEG On";
		};		
		teg_heat: teg_heat {
			gpios = <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; // off by default
			label = "TEG Heat";
		};
		teg_cool: teg_cool {
			gpios = <&gpio0 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; // off by default
			label = "TEG Cool";
		};
		teg_sleep: teg_sleep {
			gpios = <&gpio0 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; // technically this pin should be active low, but i did this so that it doesn't activate h-bridge during boot. 
			label = "TEG Sleep";
		};
	};

    aliases {
        button-heat = &button_heat;
        button-cool = &button_cool;
        led-sun = &led_sun; 
        led-frost = &led_frost;
        enable-measure = &enable_measure;
        chg-stat = &chg_stat;
        pwm-led-red = &pwm_led0;
        pwm-led-green = &pwm_led1;
        pwm-led-blue = &pwm_led2;
        teg-heat = &teg_heat;
        teg-cool = &teg_cool;
		teg-sleep = &teg_sleep;
		teg-on = &teg_on;
        watchdog = &wdt0;

    };
    

    zephyr,user {
        //compatible = "voltage-divider";
        // Bat voltage, drink ntc, heatsink ntc, I_TEG
        // channel idx: 0, 1, 2 (for ADC_DT_SPEC_GET_BY_IDX)
        io-channels =  <&adc 2>, <&adc 4>, <&adc 6>, <&adc 7>;
    };
};

&gpio0 {
    wakeup-source;
};




&pinctrl {

    // RGB
	pwm0_default: pwm0_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 17)>, // R
                <NRF_PSEL(PWM_OUT1, 0, 15)>, // G
				<NRF_PSEL(PWM_OUT2, 0, 19)>; // B
		};
	};
	pwm0_sleep: pwm0_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 17)>,
                <NRF_PSEL(PWM_OUT1, 0, 15)>,
				<NRF_PSEL(PWM_OUT2, 0, 19)>;
			low-power-enable;
		};
	};
    // UART 
    uart0_default: uart0_default {
        group1 {
            psels = <NRF_PSEL(UART_RX, 0, 8)>,
                    <NRF_PSEL(UART_TX, 0, 6)>;
        };
    };

    uart0_sleep: uart0_sleep {
        group1 {
            psels = <NRF_PSEL(UART_RX, 0, 8)>,
                    <NRF_PSEL(UART_TX, 0, 6)>;
        };
    };
};

// Green, Red, Blue LEDS
&pwm0 {
	status = "okay";
    #pwm-cells = <3>;
	pinctrl-0 = <&pwm0_default>;
	pinctrl-1 = <&pwm0_sleep>;
	pinctrl-names = "default", "sleep";
	label = "pwm_rgb";
};


&adc {
    #address-cells = <1>;
    #size-cells = <0>;
    status = "okay";
    /* BAT VOLTAGE*/
    channel@2 {
        reg = <2>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,input-positive = <NRF_SAADC_AIN2>;
        zephyr,resolution = <12>;
    };
    /* HEATSINK NTC */
    channel@6 {
        reg = <6>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,input-positive = <NRF_SAADC_AIN6>;
        zephyr,resolution = <12>;
    };
    /* DRINK NTC */
    channel@4 {
        reg = <4>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,input-positive = <NRF_SAADC_AIN4>;
        zephyr,resolution = <12>;
    };
    /* TEG CURRENT*/
    channel@7 {
        reg = <7>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,input-positive = <NRF_SAADC_AIN7>;
        zephyr,resolution = <12>;
    };
};

// /delete-node/ &slot1_partition;
// &flash0 {

//     partitions {
//         compatible = "fixed-partitions";
//         #address-cells = <1>;
//         #size-cells = <1>;

//         boot_partition: partition@0 {
//             label = "mcuboot";
//             reg = <0x00000000 0xc000>;
//         };
//         slot0_partition: partition@c000 {
//             label = "image-0";
//             reg = <0x0000C000 0x6E000>;
//         };
//         storage_partition: partition@7a000 {
//             label = "storage";
//             reg = <0x0007a000 0x00006000>;
//         };
//     };
// };




// &wdt {
// 	status = "disabled";
// };
// /delete-node/ &slot1_partition;

// &slot0_partition {
// 	reg = <0xc000 0x72000>;
// };

// &storage_partition {
// 	reg = <0x7e000 0x2000>;
// };
